// <auto-generated />
using System;
using BloodTransfusionBank.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BloodTransfusionBank.DataAccess.Migrations
{
    [DbContext(typeof(BloodTransfusionBankDbContext))]
    [Migration("20230526160407_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AppointmentBloodDonor", b =>
                {
                    b.Property<Guid>("ReservationHistoryId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UsersReservationHistoryId")
                        .HasColumnType("char(36)");

                    b.HasKey("ReservationHistoryId", "UsersReservationHistoryId");

                    b.HasIndex("UsersReservationHistoryId");

                    b.ToTable("AppointmentBloodDonor");
                });

            modelBuilder.Entity("AppointmentCenterAdministrator", b =>
                {
                    b.Property<Guid>("AppointmentsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StuffId")
                        .HasColumnType("char(36)");

                    b.HasKey("AppointmentsId", "StuffId");

                    b.HasIndex("StuffId");

                    b.ToTable("AppointmentCenterAdministrator");
                });

            modelBuilder.Entity("BloodTransfusionBank.DataAccess.Model.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DonationCenterId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DonationCenterId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("BloodTransfusionBank.DataAccess.Model.Complaint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BloodDonorId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ReffersTo")
                        .HasColumnType("int");

                    b.Property<string>("Response")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("BloodDonorId");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("BloodTransfusionBank.DataAccess.Model.DonationCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("Rating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("DonationCenters");
                });

            modelBuilder.Entity("BloodTransfusionBank.DataAccess.Model.Survey", b =>
                {
                    b.Property<Guid>("BloodDonorId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Alergies")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Diseases")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("BloodDonorId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("BloodTransfusionBank.DataAccess.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Address"), "utf8mb4");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsValidated")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Occupation")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("BloodTransfusionBank.DataAccess.Model.Administrator", b =>
                {
                    b.HasBaseType("BloodTransfusionBank.DataAccess.Model.User");

                    b.ToTable("Administrators", (string)null);
                });

            modelBuilder.Entity("BloodTransfusionBank.DataAccess.Model.BloodDonor", b =>
                {
                    b.HasBaseType("BloodTransfusionBank.DataAccess.Model.User");

                    b.Property<int>("Penalities")
                        .HasColumnType("int");

                    b.ToTable("BloodDonors", (string)null);
                });

            modelBuilder.Entity("BloodTransfusionBank.DataAccess.Model.CenterAdministrator", b =>
                {
                    b.HasBaseType("BloodTransfusionBank.DataAccess.Model.User");

                    b.ToTable("CenterAdministrators", (string)null);
                });

            modelBuilder.Entity("AppointmentBloodDonor", b =>
                {
                    b.HasOne("BloodTransfusionBank.DataAccess.Model.Appointment", null)
                        .WithMany()
                        .HasForeignKey("ReservationHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodTransfusionBank.DataAccess.Model.BloodDonor", null)
                        .WithMany()
                        .HasForeignKey("UsersReservationHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppointmentCenterAdministrator", b =>
                {
                    b.HasOne("BloodTransfusionBank.DataAccess.Model.Appointment", null)
                        .WithMany()
                        .HasForeignKey("AppointmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodTransfusionBank.DataAccess.Model.CenterAdministrator", null)
                        .WithMany()
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BloodTransfusionBank.DataAccess.Model.Appointment", b =>
                {
                    b.HasOne("BloodTransfusionBank.DataAccess.Model.DonationCenter", "DonationCenter")
                        .WithMany("Appointments")
                        .HasForeignKey("DonationCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodTransfusionBank.DataAccess.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("DonationCenter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BloodTransfusionBank.DataAccess.Model.Complaint", b =>
                {
                    b.HasOne("BloodTransfusionBank.DataAccess.Model.Appointment", "Appointment")
                        .WithOne("Complaint")
                        .HasForeignKey("BloodTransfusionBank.DataAccess.Model.Complaint", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BloodTransfusionBank.DataAccess.Model.BloodDonor", "BloodDonor")
                        .WithMany("Complaints")
                        .HasForeignKey("BloodDonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("BloodDonor");
                });

            modelBuilder.Entity("BloodTransfusionBank.DataAccess.Model.Survey", b =>
                {
                    b.HasOne("BloodTransfusionBank.DataAccess.Model.BloodDonor", "BloodDonor")
                        .WithOne("Survey")
                        .HasForeignKey("BloodTransfusionBank.DataAccess.Model.Survey", "BloodDonorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodDonor");
                });

            modelBuilder.Entity("BloodTransfusionBank.DataAccess.Model.Administrator", b =>
                {
                    b.HasOne("BloodTransfusionBank.DataAccess.Model.User", null)
                        .WithOne()
                        .HasForeignKey("BloodTransfusionBank.DataAccess.Model.Administrator", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BloodTransfusionBank.DataAccess.Model.BloodDonor", b =>
                {
                    b.HasOne("BloodTransfusionBank.DataAccess.Model.User", null)
                        .WithOne()
                        .HasForeignKey("BloodTransfusionBank.DataAccess.Model.BloodDonor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BloodTransfusionBank.DataAccess.Model.CenterAdministrator", b =>
                {
                    b.HasOne("BloodTransfusionBank.DataAccess.Model.User", null)
                        .WithOne()
                        .HasForeignKey("BloodTransfusionBank.DataAccess.Model.CenterAdministrator", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BloodTransfusionBank.DataAccess.Model.Appointment", b =>
                {
                    b.Navigation("Complaint");
                });

            modelBuilder.Entity("BloodTransfusionBank.DataAccess.Model.DonationCenter", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("BloodTransfusionBank.DataAccess.Model.BloodDonor", b =>
                {
                    b.Navigation("Complaints");

                    b.Navigation("Survey")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
